{"ast":null,"code":"import { r as registerInstance, h, H as Host, g as getElement } from './index-83f2275b.js';\nimport '@aws-amplify/core';\nimport './auth-types-78df304e.js';\nimport '@aws-amplify/auth';\nimport './Translations-108d469f.js';\nimport './constants-c8ecaa24.js';\nimport { e as closestElement, o as onAuthUIStateChange } from './helpers-14fcb50c.js';\nvar amplifyFormFieldCss = \"amplify-form-field{--label-font-size:var(--amplify-text-md);--description-font-size:var(--amplify-text-sm)}.form-field{margin-bottom:15px}.form-field-label{display:block;font-size:var(--label-font-size);padding-bottom:0.5em}.form-field-description{font-size:var(--description-font-size);padding-top:0.5em}\";\n\nvar AmplifyFormField =\n/** @class */\nfunction () {\n  function AmplifyFormField(hostRef) {\n    registerInstance(this, hostRef);\n    /** The input type.  Can be any HTML input type. */\n\n    this.type = 'text';\n    /** The required flag in order to make an input required prior to submitting a form */\n\n    this.required = false;\n    /** (Optional) The placeholder for the input element.  Using hints is recommended, but placeholders can also be useful to convey information to users. */\n\n    this.placeholder = '';\n  }\n\n  AmplifyFormField.prototype.render = function () {\n    return h(\"div\", {\n      class: \"form-field\"\n    }, this.label && h(\"div\", {\n      class: \"form-field-label\"\n    }, h(\"amplify-label\", {\n      htmlFor: this.fieldId\n    }, this.label)), this.description && h(\"div\", {\n      id: this.fieldId + \"-description\",\n      class: \"form-field-description\",\n      \"data-test\": \"form-field-description\"\n    }, this.description), h(\"div\", null, h(\"slot\", {\n      name: \"input\"\n    }, h(\"amplify-input\", {\n      fieldId: this.fieldId,\n      description: this.description,\n      type: this.type,\n      handleInputChange: this.handleInputChange,\n      placeholder: this.placeholder,\n      name: this.name,\n      value: this.value,\n      inputProps: this.inputProps,\n      disabled: this.disabled,\n      required: this.required\n    }))), this.hint && h(\"amplify-hint\", {\n      id: this.fieldId + \"-hint\"\n    }, this.hint));\n  };\n\n  return AmplifyFormField;\n}();\n\nAmplifyFormField.style = amplifyFormFieldCss;\nvar amplifyHintCss = \":host{--color:var(--amplify-grey);--font-family:var(--amplify-font-family);--font-size:var(--amplify-text-xs);--font-weight:var(--amplify-font-weight)}.hint{color:var(--color);font-family:var(--font-family);font-weight:var(--font-weight);font-size:var(--font-size);margin-bottom:2.625rem}\";\n\nvar AmplifyHint =\n/** @class */\nfunction () {\n  function AmplifyHint(hostRef) {\n    registerInstance(this, hostRef);\n  }\n\n  AmplifyHint.prototype.render = function () {\n    return h(\"div\", {\n      class: \"hint\"\n    }, h(\"slot\", null));\n  };\n\n  return AmplifyHint;\n}();\n\nAmplifyHint.style = amplifyHintCss;\nvar amplifyInputCss = \"amplify-input{--color:var(--amplify-secondary-color);--background-color:var(--amplify-secondary-contrast);--border-color:var(--amplify-light-grey);--border-color-focus:var(--amplify-primary-color);--border:1px solid var(--border-color);--margin:0 0 0.625rem 0}[data-autocompleted]{background-color:#e8f0fe !important}.input-host{width:100%}.input{display:block;width:100%;padding:1rem;font-size:var(--amplify-text-sm);color:var(--color);background-color:var(--background-color);background-image:none;border:var(--border);border-radius:3px;-webkit-box-sizing:border-box;box-sizing:border-box;margin:var(--margin);height:3.125rem;line-height:1.1;-webkit-box-shadow:none;box-shadow:none}.input:focus{outline:none;border-color:var(--border-color-focus)}.input:disabled{opacity:0.5}\";\n\nvar AmplifyInput =\n/** @class */\nfunction () {\n  function AmplifyInput(hostRef) {\n    registerInstance(this, hostRef);\n    /** The input type.  Can be any HTML input type. */\n\n    this.type = 'text';\n    /** The callback, called when the input is modified by the user. */\n\n    this.handleInputChange = function () {\n      return void 0;\n    };\n    /** (Optional) The placeholder for the input element.  Using hints is recommended, but placeholders can also be useful to convey information to users. */\n\n\n    this.placeholder = '';\n    /** Whether the input is a required field */\n\n    this.required = false;\n    /** Whether the input has been autocompleted */\n\n    this.autoCompleted = false;\n  }\n  /**\n   * Sets the value of this input to the value in autofill input event.\n   */\n\n\n  AmplifyInput.prototype.setAutoCompleteValue = function (value) {\n    var input = this.el.querySelector('input');\n    if (!input) return;\n    input.value = value; // dispatch an input event from this element to the parent form\n\n    input.dispatchEvent(new Event('input'));\n    this.autoCompleted = true;\n  };\n  /**\n   * Checks if the target dummy input in `amplify-auth-container` is present have been autofilled.\n   * If so, we update this.value with the autofilled value.\n   */\n\n\n  AmplifyInput.prototype.checkAutoCompletion = function (targetInput) {\n    var _this = this;\n\n    if (!targetInput) return;\n\n    if (targetInput.value) {\n      // if value is already set, we set the value directly\n      this.setAutoCompleteValue(targetInput.value);\n    } else {\n      // if value is not set, we start listening for it\n      targetInput.addEventListener('input', function (e) {\n        var value = e.target.value;\n\n        _this.setAutoCompleteValue(value);\n      });\n    }\n  };\n\n  AmplifyInput.prototype.disconnectedCallback = function () {\n    this.removeHubListener && this.removeHubListener(); // stop listening to `onAuthUIStateChange`\n  };\n\n  AmplifyInput.prototype.componentWillLoad = function () {\n    var _this = this; // the below behaviors are only applicable if `amplify-input` is used by `amplify-authenticator`.\n\n\n    if (!closestElement('amplify-authenticator', this.el)) return;\n    this.removeHubListener = onAuthUIStateChange(function () {\n      /**\n       *Â When we're using slots, autofilled data will persist between different authState,\n       * even though input events are not triggered. This ends up in parent components\n       * not picking up input values. For now, we're emptying the input on authState change\n       * which is the existing behavior.\n       */\n      var input = _this.el.querySelector('input');\n\n      if (input) input.value = '';\n      _this.autoCompleted = false;\n    });\n  };\n\n  AmplifyInput.prototype.componentDidLoad = function () {\n    // no-op if this field already has been autofilled or already has an value\n    if (this.autoCompleted || this.value) return;\n    if (/Firefox/.test(navigator.userAgent)) return; // firefox autofill works\n\n    var container = closestElement('amplify-auth-container', this.el);\n    var signIn = closestElement('amplify-sign-in', this.el); // only autocomplete if `amplify-auth-container` is present and input is under `sign-in`.\n\n    if (!container || !signIn) return;\n    var username = container.querySelector(\"input[name='username']\");\n    var password = container.querySelector(\"input[name='password']\");\n\n    if (this.name === 'username' || this.name === 'email' || this.name === 'phone') {\n      this.checkAutoCompletion(username);\n    } else if (this.name === 'password') {\n      this.checkAutoCompletion(password);\n    }\n  };\n\n  AmplifyInput.prototype.render = function () {\n    var _this = this;\n\n    return h(Host, {\n      class: \"input-host\"\n    }, h(\"input\", Object.assign({\n      id: this.fieldId,\n      \"aria-describedby\": this.fieldId && this.description ? this.fieldId + \"-description\" : null,\n      \"data-autocompleted\": this.autoCompleted,\n      type: this.type,\n      onInput: function (event) {\n        _this.autoCompleted = false;\n\n        _this.handleInputChange(event);\n      },\n      placeholder: this.placeholder,\n      name: this.name,\n      class: \"input\",\n      value: this.value,\n      disabled: this.disabled,\n      required: this.required\n    }, this.inputProps)));\n  };\n\n  Object.defineProperty(AmplifyInput.prototype, \"el\", {\n    get: function () {\n      return getElement(this);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return AmplifyInput;\n}();\n\nAmplifyInput.style = amplifyInputCss;\nvar amplifyLabelCss = \":host{--label-color:var(--amplify-secondary-color)}.label{color:var(--label-color);font-size:var(--amplify-text-sm);margin-bottom:16px}\";\n\nvar AmplifyLabel =\n/** @class */\nfunction () {\n  function AmplifyLabel(hostRef) {\n    registerInstance(this, hostRef);\n  }\n\n  AmplifyLabel.prototype.render = function () {\n    return h(\"label\", {\n      class: \"label\",\n      htmlFor: this.htmlFor\n    }, h(\"slot\", null));\n  };\n\n  return AmplifyLabel;\n}();\n\nAmplifyLabel.style = amplifyLabelCss;\nexport { AmplifyFormField as amplify_form_field, AmplifyHint as amplify_hint, AmplifyInput as amplify_input, AmplifyLabel as amplify_label };","map":{"version":3,"names":["r","registerInstance","h","H","Host","g","getElement","e","closestElement","o","onAuthUIStateChange","amplifyFormFieldCss","AmplifyFormField","hostRef","type","required","placeholder","prototype","render","class","label","htmlFor","fieldId","description","id","name","handleInputChange","value","inputProps","disabled","hint","style","amplifyHintCss","AmplifyHint","amplifyInputCss","AmplifyInput","autoCompleted","setAutoCompleteValue","input","el","querySelector","dispatchEvent","Event","checkAutoCompletion","targetInput","_this","addEventListener","target","disconnectedCallback","removeHubListener","componentWillLoad","componentDidLoad","test","navigator","userAgent","container","signIn","username","password","Object","assign","onInput","event","defineProperty","get","enumerable","configurable","amplifyLabelCss","AmplifyLabel","amplify_form_field","amplify_hint","amplify_input","amplify_label"],"sources":["/Users/musyaffaq/Documents/GitHub/aws-amplify-react-app/node_modules/@aws-amplify/ui-components/dist/esm-es5/amplify-form-field_4.entry.js"],"sourcesContent":["import { r as registerInstance, h, H as Host, g as getElement } from './index-83f2275b.js';\nimport '@aws-amplify/core';\nimport './auth-types-78df304e.js';\nimport '@aws-amplify/auth';\nimport './Translations-108d469f.js';\nimport './constants-c8ecaa24.js';\nimport { e as closestElement, o as onAuthUIStateChange } from './helpers-14fcb50c.js';\nvar amplifyFormFieldCss = \"amplify-form-field{--label-font-size:var(--amplify-text-md);--description-font-size:var(--amplify-text-sm)}.form-field{margin-bottom:15px}.form-field-label{display:block;font-size:var(--label-font-size);padding-bottom:0.5em}.form-field-description{font-size:var(--description-font-size);padding-top:0.5em}\";\nvar AmplifyFormField = /** @class */ (function () {\n    function AmplifyFormField(hostRef) {\n        registerInstance(this, hostRef);\n        /** The input type.  Can be any HTML input type. */\n        this.type = 'text';\n        /** The required flag in order to make an input required prior to submitting a form */\n        this.required = false;\n        /** (Optional) The placeholder for the input element.  Using hints is recommended, but placeholders can also be useful to convey information to users. */\n        this.placeholder = '';\n    }\n    AmplifyFormField.prototype.render = function () {\n        return (h(\"div\", { class: \"form-field\" }, this.label && (h(\"div\", { class: \"form-field-label\" }, h(\"amplify-label\", { htmlFor: this.fieldId }, this.label))), this.description && (h(\"div\", { id: this.fieldId + \"-description\", class: \"form-field-description\", \"data-test\": \"form-field-description\" }, this.description)), h(\"div\", null, h(\"slot\", { name: \"input\" }, h(\"amplify-input\", { fieldId: this.fieldId, description: this.description, type: this.type, handleInputChange: this.handleInputChange, placeholder: this.placeholder, name: this.name, value: this.value, inputProps: this.inputProps, disabled: this.disabled, required: this.required }))), this.hint && (h(\"amplify-hint\", { id: this.fieldId + \"-hint\" }, this.hint))));\n    };\n    return AmplifyFormField;\n}());\nAmplifyFormField.style = amplifyFormFieldCss;\nvar amplifyHintCss = \":host{--color:var(--amplify-grey);--font-family:var(--amplify-font-family);--font-size:var(--amplify-text-xs);--font-weight:var(--amplify-font-weight)}.hint{color:var(--color);font-family:var(--font-family);font-weight:var(--font-weight);font-size:var(--font-size);margin-bottom:2.625rem}\";\nvar AmplifyHint = /** @class */ (function () {\n    function AmplifyHint(hostRef) {\n        registerInstance(this, hostRef);\n    }\n    AmplifyHint.prototype.render = function () {\n        return (h(\"div\", { class: \"hint\" }, h(\"slot\", null)));\n    };\n    return AmplifyHint;\n}());\nAmplifyHint.style = amplifyHintCss;\nvar amplifyInputCss = \"amplify-input{--color:var(--amplify-secondary-color);--background-color:var(--amplify-secondary-contrast);--border-color:var(--amplify-light-grey);--border-color-focus:var(--amplify-primary-color);--border:1px solid var(--border-color);--margin:0 0 0.625rem 0}[data-autocompleted]{background-color:#e8f0fe !important}.input-host{width:100%}.input{display:block;width:100%;padding:1rem;font-size:var(--amplify-text-sm);color:var(--color);background-color:var(--background-color);background-image:none;border:var(--border);border-radius:3px;-webkit-box-sizing:border-box;box-sizing:border-box;margin:var(--margin);height:3.125rem;line-height:1.1;-webkit-box-shadow:none;box-shadow:none}.input:focus{outline:none;border-color:var(--border-color-focus)}.input:disabled{opacity:0.5}\";\nvar AmplifyInput = /** @class */ (function () {\n    function AmplifyInput(hostRef) {\n        registerInstance(this, hostRef);\n        /** The input type.  Can be any HTML input type. */\n        this.type = 'text';\n        /** The callback, called when the input is modified by the user. */\n        this.handleInputChange = function () { return void 0; };\n        /** (Optional) The placeholder for the input element.  Using hints is recommended, but placeholders can also be useful to convey information to users. */\n        this.placeholder = '';\n        /** Whether the input is a required field */\n        this.required = false;\n        /** Whether the input has been autocompleted */\n        this.autoCompleted = false;\n    }\n    /**\n     * Sets the value of this input to the value in autofill input event.\n     */\n    AmplifyInput.prototype.setAutoCompleteValue = function (value) {\n        var input = this.el.querySelector('input');\n        if (!input)\n            return;\n        input.value = value;\n        // dispatch an input event from this element to the parent form\n        input.dispatchEvent(new Event('input'));\n        this.autoCompleted = true;\n    };\n    /**\n     * Checks if the target dummy input in `amplify-auth-container` is present have been autofilled.\n     * If so, we update this.value with the autofilled value.\n     */\n    AmplifyInput.prototype.checkAutoCompletion = function (targetInput) {\n        var _this = this;\n        if (!targetInput)\n            return;\n        if (targetInput.value) {\n            // if value is already set, we set the value directly\n            this.setAutoCompleteValue(targetInput.value);\n        }\n        else {\n            // if value is not set, we start listening for it\n            targetInput.addEventListener('input', function (e) {\n                var value = e.target.value;\n                _this.setAutoCompleteValue(value);\n            });\n        }\n    };\n    AmplifyInput.prototype.disconnectedCallback = function () {\n        this.removeHubListener && this.removeHubListener(); // stop listening to `onAuthUIStateChange`\n    };\n    AmplifyInput.prototype.componentWillLoad = function () {\n        var _this = this;\n        // the below behaviors are only applicable if `amplify-input` is used by `amplify-authenticator`.\n        if (!closestElement('amplify-authenticator', this.el))\n            return;\n        this.removeHubListener = onAuthUIStateChange(function () {\n            /**\n             *Â When we're using slots, autofilled data will persist between different authState,\n             * even though input events are not triggered. This ends up in parent components\n             * not picking up input values. For now, we're emptying the input on authState change\n             * which is the existing behavior.\n             */\n            var input = _this.el.querySelector('input');\n            if (input)\n                input.value = '';\n            _this.autoCompleted = false;\n        });\n    };\n    AmplifyInput.prototype.componentDidLoad = function () {\n        // no-op if this field already has been autofilled or already has an value\n        if (this.autoCompleted || this.value)\n            return;\n        if (/Firefox/.test(navigator.userAgent))\n            return; // firefox autofill works\n        var container = closestElement('amplify-auth-container', this.el);\n        var signIn = closestElement('amplify-sign-in', this.el);\n        // only autocomplete if `amplify-auth-container` is present and input is under `sign-in`.\n        if (!container || !signIn)\n            return;\n        var username = container.querySelector(\"input[name='username']\");\n        var password = container.querySelector(\"input[name='password']\");\n        if (this.name === 'username' ||\n            this.name === 'email' ||\n            this.name === 'phone') {\n            this.checkAutoCompletion(username);\n        }\n        else if (this.name === 'password') {\n            this.checkAutoCompletion(password);\n        }\n    };\n    AmplifyInput.prototype.render = function () {\n        var _this = this;\n        return (h(Host, { class: \"input-host\" }, h(\"input\", Object.assign({ id: this.fieldId, \"aria-describedby\": this.fieldId && this.description\n                ? this.fieldId + \"-description\"\n                : null, \"data-autocompleted\": this.autoCompleted, type: this.type, onInput: function (event) {\n                _this.autoCompleted = false;\n                _this.handleInputChange(event);\n            }, placeholder: this.placeholder, name: this.name, class: \"input\", value: this.value, disabled: this.disabled, required: this.required }, this.inputProps))));\n    };\n    Object.defineProperty(AmplifyInput.prototype, \"el\", {\n        get: function () { return getElement(this); },\n        enumerable: false,\n        configurable: true\n    });\n    return AmplifyInput;\n}());\nAmplifyInput.style = amplifyInputCss;\nvar amplifyLabelCss = \":host{--label-color:var(--amplify-secondary-color)}.label{color:var(--label-color);font-size:var(--amplify-text-sm);margin-bottom:16px}\";\nvar AmplifyLabel = /** @class */ (function () {\n    function AmplifyLabel(hostRef) {\n        registerInstance(this, hostRef);\n    }\n    AmplifyLabel.prototype.render = function () {\n        return (h(\"label\", { class: \"label\", htmlFor: this.htmlFor }, h(\"slot\", null)));\n    };\n    return AmplifyLabel;\n}());\nAmplifyLabel.style = amplifyLabelCss;\nexport { AmplifyFormField as amplify_form_field, AmplifyHint as amplify_hint, AmplifyInput as amplify_input, AmplifyLabel as amplify_label };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}