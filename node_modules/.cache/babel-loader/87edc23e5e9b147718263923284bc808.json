{"ast":null,"code":"import { isGeofence } from \"./utils\";\nimport { COLOR_BLACK } from \"./constants\";\nconst FILL_OPACITY = 0.3;\nconst BORDER_OPACITY = 0.5;\nconst BORDER_WIDTH = 4;\n/**\n * DrawPoints utility function for adding points to a map based on coordinate data or a FeatureCollection. Will add clustered points and styled markers by default with options for popups and other styles\n */\n\nexport function drawGeofences(sourceName, data, map) {\n  let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n  var _a, _b, _c, _d, _e;\n\n  if (!map || typeof map.addSource !== \"function\" || typeof map.addLayer !== \"function\") {\n    throw new Error(\"Please use a maplibre map\");\n  }\n  /*\n   * Convert data passed in as coordinates into features\n   */\n\n\n  const features = getGeofenceFeaturesFromData(data);\n  /*\n   * Data source for features\n   */\n\n  const sourceId = `${sourceName}-source`;\n  map.addSource(sourceId, {\n    type: \"geojson\",\n    data: {\n      type: \"FeatureCollection\",\n      features\n    },\n    generateId: true\n  });\n  /*\n   * Draw ui layers for source data\n   */\n  // Add a new layer to visualize the polygon.\n\n  const fillLayerId = `${sourceName}-fill-layer`;\n  map.addLayer({\n    id: fillLayerId,\n    type: \"fill\",\n    source: sourceId,\n    layout: {\n      visibility: \"visible\"\n    },\n    paint: {\n      \"fill-color\": (_a = options.fillColor) !== null && _a !== void 0 ? _a : COLOR_BLACK,\n      \"fill-opacity\": (_b = options.fillOpacity) !== null && _b !== void 0 ? _b : FILL_OPACITY\n    }\n  }); // Add a black outline around the polygon.\n\n  const outlineLayerId = `${sourceName}-outline-layer`;\n  map.addLayer({\n    id: outlineLayerId,\n    type: \"line\",\n    source: sourceId,\n    layout: {\n      visibility: \"visible\"\n    },\n    paint: {\n      \"line-color\": (_c = options.borderColor) !== null && _c !== void 0 ? _c : COLOR_BLACK,\n      \"line-opacity\": (_d = options.borderOpacity) !== null && _d !== void 0 ? _d : BORDER_OPACITY,\n      \"line-width\": (_e = options.borderWidth) !== null && _e !== void 0 ? _e : BORDER_WIDTH\n    }\n  }); // utility function for setting layer visibility to none\n\n  const hide = () => {\n    map.setLayoutProperty(fillLayerId, \"visibility\", \"none\");\n    map.setLayoutProperty(outlineLayerId, \"visibility\", \"none\");\n  }; // utility function for setting layer visibility to visible\n\n\n  const show = () => {\n    map.setLayoutProperty(fillLayerId, \"visibility\", \"visible\");\n    map.setLayoutProperty(outlineLayerId, \"visibility\", \"visible\");\n  };\n\n  return {\n    sourceId,\n    outlineLayerId,\n    fillLayerId,\n    show,\n    hide\n  };\n}\n\nconst getGeofenceFeaturesFromData = data => {\n  const features = data.map(item => {\n    const coordinates = isGeofence(item) ? item.geometry.polygon : item;\n    return {\n      type: \"Feature\",\n      geometry: {\n        type: \"Polygon\",\n        coordinates\n      },\n      properties: {}\n    };\n  });\n  return features;\n};","map":{"version":3,"names":["isGeofence","COLOR_BLACK","FILL_OPACITY","BORDER_OPACITY","BORDER_WIDTH","drawGeofences","sourceName","data","map","options","_a","_b","_c","_d","_e","addSource","addLayer","Error","features","getGeofenceFeaturesFromData","sourceId","type","generateId","fillLayerId","id","source","layout","visibility","paint","fillColor","fillOpacity","outlineLayerId","borderColor","borderOpacity","borderWidth","hide","setLayoutProperty","show","item","coordinates","geometry","polygon","properties"],"sources":["/Users/musyaffaq/node_modules/maplibre-gl-js-amplify/lib/esm/drawGeofences.js"],"sourcesContent":["import { isGeofence } from \"./utils\";\nimport { COLOR_BLACK } from \"./constants\";\nconst FILL_OPACITY = 0.3;\nconst BORDER_OPACITY = 0.5;\nconst BORDER_WIDTH = 4;\n/**\n * DrawPoints utility function for adding points to a map based on coordinate data or a FeatureCollection. Will add clustered points and styled markers by default with options for popups and other styles\n */\nexport function drawGeofences(sourceName, data, map, options = {}) {\n    var _a, _b, _c, _d, _e;\n    if (!map ||\n        typeof map.addSource !== \"function\" ||\n        typeof map.addLayer !== \"function\") {\n        throw new Error(\"Please use a maplibre map\");\n    }\n    /*\n     * Convert data passed in as coordinates into features\n     */\n    const features = getGeofenceFeaturesFromData(data);\n    /*\n     * Data source for features\n     */\n    const sourceId = `${sourceName}-source`;\n    map.addSource(sourceId, {\n        type: \"geojson\",\n        data: {\n            type: \"FeatureCollection\",\n            features,\n        },\n        generateId: true,\n    });\n    /*\n     * Draw ui layers for source data\n     */\n    // Add a new layer to visualize the polygon.\n    const fillLayerId = `${sourceName}-fill-layer`;\n    map.addLayer({\n        id: fillLayerId,\n        type: \"fill\",\n        source: sourceId,\n        layout: {\n            visibility: \"visible\",\n        },\n        paint: {\n            \"fill-color\": (_a = options.fillColor) !== null && _a !== void 0 ? _a : COLOR_BLACK,\n            \"fill-opacity\": (_b = options.fillOpacity) !== null && _b !== void 0 ? _b : FILL_OPACITY,\n        },\n    });\n    // Add a black outline around the polygon.\n    const outlineLayerId = `${sourceName}-outline-layer`;\n    map.addLayer({\n        id: outlineLayerId,\n        type: \"line\",\n        source: sourceId,\n        layout: {\n            visibility: \"visible\",\n        },\n        paint: {\n            \"line-color\": (_c = options.borderColor) !== null && _c !== void 0 ? _c : COLOR_BLACK,\n            \"line-opacity\": (_d = options.borderOpacity) !== null && _d !== void 0 ? _d : BORDER_OPACITY,\n            \"line-width\": (_e = options.borderWidth) !== null && _e !== void 0 ? _e : BORDER_WIDTH,\n        },\n    });\n    // utility function for setting layer visibility to none\n    const hide = () => {\n        map.setLayoutProperty(fillLayerId, \"visibility\", \"none\");\n        map.setLayoutProperty(outlineLayerId, \"visibility\", \"none\");\n    };\n    // utility function for setting layer visibility to visible\n    const show = () => {\n        map.setLayoutProperty(fillLayerId, \"visibility\", \"visible\");\n        map.setLayoutProperty(outlineLayerId, \"visibility\", \"visible\");\n    };\n    return { sourceId, outlineLayerId, fillLayerId, show, hide };\n}\nconst getGeofenceFeaturesFromData = (data) => {\n    const features = data.map((item) => {\n        const coordinates = isGeofence(item) ? item.geometry.polygon : item;\n        return {\n            type: \"Feature\",\n            geometry: {\n                type: \"Polygon\",\n                coordinates,\n            },\n            properties: {},\n        };\n    });\n    return features;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}